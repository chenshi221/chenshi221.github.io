<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东京不太热</title>
  
  <subtitle>Tokyo HOT</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-27T15:53:01.725Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chen Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A-SOUL</title>
    <link href="http://example.com/2023/10/27/A-SOUL/"/>
    <id>http://example.com/2023/10/27/A-SOUL/</id>
    <published>2023-10-27T14:19:04.000Z</published>
    <updated>2023-10-27T15:53:01.725Z</updated>
    
    <content type="html"><![CDATA[<p>A-SOUL是一支由乐华娱乐公司打造的虚拟女团，成员包括向晚（Ava）、贝拉（Bella）、珈乐（Carol）、嘉然（Diana）和乃琳（Eileen）。他们于2020年11月正式出道，以“乐华娱乐首个虚拟偶像团体”的身份引起了广泛关注。</p><p>自出道以来，A-SOUL积极发展，发布了多首热门单曲，包括首张单曲《Quiet》，以及后续的单曲《超级敏感》和《传说的世界》。此外，他们还在虚拟世界中进行了多次线上直播，与粉丝互动，展现了强大的娱乐能力。</p><p>除了音乐活动，A-SOUL还积极参与线上演出和活动，其中包括参加《抖音美好奇妙夜》等。他们还于2022年发行了虎年贺岁单曲《除夕》，以及首张EP《共鸣 Re-sonance（上）》。这张EP包括团曲《Re-sonance》，向晚和嘉然的合作曲《DA DA》，以及贝拉和乃琳的合作曲《练习心事》。</p><p>A-SOUL以其多样化的音乐和虚拟形象赢得了广大粉丝的喜爱，为虚拟娱乐领域带来了新的活力和创意。他们的持续发展和创新活动使他们成为虚拟娱乐领域备受瞩目的团体。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A-SOUL是一支由乐华娱乐公司打造的虚拟女团，成员包括向晚（Ava）、贝拉（Bella）、珈乐（Carol）、嘉然（Diana）和乃琳（Eileen）。他们于2020年11月正式出道，以“乐华娱乐首个虚拟偶像团体”的身份引起了广泛关注。&lt;/p&gt;
&lt;p&gt;自出道以来，A-SO</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA</title>
    <link href="http://example.com/2023/10/27/JAVA/"/>
    <id>http://example.com/2023/10/27/JAVA/</id>
    <published>2023-10-27T13:27:55.000Z</published>
    <updated>2023-10-27T15:46:59.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="基本程序设计结构"><a href="#基本程序设计结构" class="headerlink" title="基本程序设计结构"></a>基本程序设计结构</h2><ol><li><p>源代码的文件名必须和公共类的名字相同</p></li><li><p>Java 使用的通用语法是<br> <code>object.method(parameters)</code></p></li><li><p>整型值和布尔值之间不能互相转换</p></li><li><p>从 Java 10 开始，对于局部变量，如果可以从变量的初始值推断出它的类型，就不再需要声明类型。只需要使用关键字 var 而无须指定类型</p></li><li><p>在 Java 中，并不区分变量的声明和定义</p></li><li><p>在 Java 中，利用关键字 final 指示常量</p></li><li><p>希望某个常量可以在一个类的多个方法中使用，通常将这些常量称为类常量。可以使用关键字static final设置一个类常量</p></li><li><p>枚举</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Size</span> &#123; SMALL, MEDIUM, LARGE, EXTRA_LARGE &#125;;</span><br><span class="line"><span class="type">Size</span> <span class="variable">s</span> <span class="operator">=</span> Size.MEDIUM;</span><br></pre></td></tr></table></figure></li><li><p>类型转换 <code>y=(typename) x</code></p></li><li><p>&gt;&gt;&gt;运算符会用0 填充高位，这与&gt;&gt;不同，它会用符号位填充高位</p></li><li><p>子串 <code>str2=str1.substring(a,b)</code></p></li><li><p>由于不能修改 Java 字符串中的单个字符，所以在 Java 文档中将 String 类对象称为是不可变的(immutable)</p></li><li><p>可以使用 equals 方法检测两个字符串是否相等。对于表达式：<br><code>s.equals(t)</code></p></li><li><p>&#x3D;&#x3D;一定不要使用<code>==</code>运算符检测两个字符串是否相等!&#x3D;&#x3D;这个运算符只能够确定两个字符串是否存放在同一个位置上</p></li><li><p>有时要检查一个字符串既不是 null 也不是空串，这种情况下就需要使用以下条件：<br><code>if (str != null &amp;&amp; str.length() != 0)</code></p></li></ol><h3 id="java-lang-String"><a href="#java-lang-String" class="headerlink" title="java.lang.String"></a>java.lang.String</h3><ol><li><p><code>int compareTo(String other)</code><br> 按照字典顺序，如果字符串位于 other 之前，返回一个负数；如果字符串位于other 之后，返回一个正数；如果两个字符串相等，返回0</p></li><li><p><code>new String(int[] codePoints, int offset, int count)</code><br> 用数组中从 offset 开始的 count 个码点构造一个字符串</p></li><li><p>append方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">builder.append(ch); </span><br></pre></td></tr></table></figure></li></ol><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><h4 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h4><ol><li><p>首先需要构造一个与“标准输入流”System.in 关联的 Scanner 对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.nextLine();</span><br></pre></td></tr></table></figure></li><li><p>要想读取一个单词 (以空白符作为分隔符)，可以调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> in.next();</span><br></pre></td></tr></table></figure></li><li><p>要想读取一个整数，就调用 nextlnt 方法。与此类似，要想读取下一个浮点数，就调用 nextDouble 方法。</p></li><li><p><code>import java.util.*;</code></p></li><li><p><code>boolean hasNext()</code><br> 检测输入中是否还有其他单词。</p></li></ol><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><ol><li><p>沿用c的printf函数与格式</p></li><li><p>可以使用静态的 String.format 方法创建一个格式化的字符串，而不打印输出：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="string">&quot;Hello, %s. Next year, you&#x27;ll be %d&quot;</span>, name, age);</span><br></pre></td></tr></table></figure></li></ol><h4 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I&#x2F;O"></a>文件I&#x2F;O</h4><ol><li><p>读取需构造Scanner对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Path.of(<span class="string">&quot;myfile.txt&quot;</span>),StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure></li><li><p>如果文件名中包含’&#39;,需要再添加’&#39;转义</p></li><li><p>输出需构造PrintWriter对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Printwriter</span>(<span class="string">&quot;myfile.txt&quot;</span>,StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure></li></ol><h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><ol><li>java不能在嵌套的两个块中声明同名的变量</li><li>for 循环语句只不过是 while 循环的一种简化形式</li><li>Java 有一个与 C&#x2F;C++ 完全一样的switch语句</li><li>当在 switch 语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由 switch 的表达式值推导得出</li></ol><h4 id="带标签的break"><a href="#带标签的break" class="headerlink" title="带标签的break"></a>带标签的break</h4><ol><li><p>标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lable:</span><br><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">     ···</span><br><span class="line">     <span class="keyword">if</span>(condition) <span class="keyword">break</span> lable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h3><ol><li><code>for (variable : collection ) statement</code></li><li>collection这一集合表达式必须是一个数组或者是一个实现了Iterable接口的类对象(例如 ArrayList)</li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><p>声明 <code>typename[] name = new typename[length]</code></p></li><li><p>一旦创建了数组，就不能再改变它的长度</p></li><li><p>可以使用这种语法重新初始化一个数组而无须创建新变量。例如：<br> <code>smallPrines = new int[] &#123; 17, 19, 23, 29, 31, 37 &#125;;</code></p></li><li><p>注意，长度为 0 的数组与 null 并不相同</p></li><li><p>创建一个数字数组时，所有元素都初始化为 0。boolean 数组的元素会初始化为 false。对象数组的元素则初始化为一个特殊值 null, 表示这些元素（还）未存放任何对象。</p></li><li><p>要想获得数组中的元素个数. 可以使用 <code>array.length</code></p></li><li><p>打印数组中的所有值<br> <code>System.out.printin(Arrays.toString(a));</code></p></li><li><p>数组间复制指引用同一个数组</p></li><li><p>拷贝——<code>array2=array.copyOf(array1,array1.length)</code></p></li><li><p><code>int[] a = new int[100]; // Java</code>等同于<code>int* a = new int [100]; // C++</code><br>Java 中的[]运算符被预定义为会完成越界检查，而且没有指针运算，即不能通过a加1得到数组中的下一个元素。</p></li><li><p>数组排序,<code>Arrays.sort(a)</code></p></li></ol><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><ol><li><p>java多维数组实质上是一维数组</p></li><li><p>由于可以单独地访问数组的某一行，所以可以让两行交换</p></li><li><p>还可以方便地构造一个 “不规则”数组，即数组的每一行有不同的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] odds = <span class="keyword">new</span> <span class="title class_">int</span>[NMAX + <span class="number">1</span>][];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt;= NMAX; n++)</span><br><span class="line">    odds[n] = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ol><li>要认识到重要的一点：对象变量并没有实际包含一个对象，它只是引用一个对象。在 Java 中，任何对象变量的值都是对存储在另外一个地方的某个对象的引用。new 操作符的返回值也是一个引用。</li><li>可以显式地将对象变量设置为 null, 指示这个对象变量目前没有引用任何对象。</li><li>在 Java 中，必须使用 clone 方法获得对象的完整副本</li><li>静态工厂方法（factorymethod）, 它会代表你调用构造器&#x3D;&#x3D;构造函数？&#x3D;&#x3D;</li><li>更改器方法 (mutator method)</li><li>访问器方法 (accessor method)——只访问对象而不修改对象的方法</li><li>源文件名必须与 public 类的名字相匹配。在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。</li></ol><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ol><li>构造器与类同名，构造器总是结合 new 运算符来调用。不能对一个已经存在的对象调用构造器来达到重新设置实例字段的目的</li><li>不要在构造器中定义与实例字段同名的局部变量</li><li>如果可以从变量的初始值推导出它们的类型，那么可以用 var 关键字声明局部变量，而无须指定类型，&#x3D;&#x3D;注意 var 关键字只能用于方法中的局部变量&#x3D;&#x3D;。参数和字段的类型必须声明</li><li>关键字 this 指示隐式参数(同C++)</li><li>在Java 中，所有的方法都必须在类的内部定义</li><li>final 修饰符对于类型为基本类型或者不可变类的字段尤其有用。</li></ol><h4 id="静态字段与静态方法"><a href="#静态字段与静态方法" class="headerlink" title="静态字段与静态方法"></a>静态字段与静态方法</h4><ol><li>如果将一个字段定义为 static, 每个类只有一个这样的字段，属于类，而不属于任何单个的对象</li><li>静态常量——可以通过类名类访问，不需要对象</li><li>静态方法是不在对象上执行的方法</li><li>在下面两种情况下可以使用静态方法：<br> • 方法不需要访问对象状态，因为它需要的所有参数都通过显式参数提供<br> • 方法只需要访问类的静态字段</li></ol><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ol><li>&#x3D;&#x3D;Java 程序设计语言总是采用按值调用&#x3D;&#x3D;,方法不能修改传递给它的任何参数变量的内容。</li><li>对于对象，方法得到的是对象引用的副本，原来的对象引用和这个副本都引用同一个对象。</li><li>&#x3D;&#x3D;对象引用是也是按值传递的&#x3D;&#x3D;</li><li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，那么构造对象时如果不提供参数就是不合法的。</li><li>如果构造器的第一个语句形如 this()， 这个构造器将调用同一个类的另一个构造器。</li><li>初始化块 ：只用大括号包起来</li></ol><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ol><li>需要注意的是，只能使用星号 (*) 导入一个包</li><li>不同包的同名类需要加上完整包名来引用</li><li>有一种 import 语句允许导入静态方法和静态字段，而不只是类。<br> 例如，如果在源文件顶部，添加一条指令：<br> <code>import static java.lang.System.*;</code><br> 就可以使用 System 类的静态方法和静态字段，而不必加类名前缀</li><li>要想将类放入包中，就必须将包的名字放在源文件的开头<br><code>package x.x.x</code><br>将源文件放到与完整包名匹配的子目录中</li><li>前面已经接触过访问修饰符 public 和 private。标记为 public 的部分可以由任意类使用；标记为 private的部分只能由定义它们的类使用。如果没有指定 public 或 private, 这个部分(类、方法或变量)可以被同一个包中的所有方法访问</li></ol><h4 id="类路径"><a href="#类路径" class="headerlink" title="类路径"></a>类路径</h4><ol><li>类路径是所有包含类文件的路径的集合，类路径中的各项之间用以分号（;）分隔，用句点（.）表示当前目录<br><code>c:\classdir;.;c:\archives\archive.jar</code></li><li>类注释必须放在 import 语句之后，类定义之前</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li><p>类注释，必须放在import后，类前</p></li><li><p>方法注释，放在方法前</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> 异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 参数列表</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h3><ol><li>使用关键字 extends 表示继承<br><code>public class Manager extends Employee</code></li><li>子类不能直接访问父类的私有字段，只能通过父类的公共方法来访问</li><li>如果在重载父类方法时希望调用父类方法，使用特殊关键字 <code>super</code></li><li>子类构造器</li><li>有一个简单规则可以用来判断是否应该将数据设计为继承关系，它指出子类的每个对象也是超类的对象</li><li>在 Java 程序设计语言中，对象变量是多态的，超类的变量既可以引用一个超类的对象，也可以引用任何一个子类的对象</li><li>在这个例子中，变量 staff[0] 与 boss 引用同一个对象。但编译器只将 staff[0] 看成是一个 Employee 对象。这意味着，可以这样调用<br> boss.setBonus(5000); &#x2F;&#x2F; OK<br> 但不能这样调用<br> staff[0].setBonus(5000); &#x2F;&#x2F; ERROR<br> 这是因为 staff[0] 声明的类型是 Employee, 而 setBonus 不是 Employee 类的方法。</li><li>不能将超类的引用赋给子类变量</li><li>所有数组都要牢记创建时的元素类型，并负责监督仅将类型兼容的引用存储到数组中</li><li>如果是 private方法、static方法、final方法或者构造器，那么编译器将可以准确地知道应该调用哪个方法。这称为静态绑定(static binding)。与此对应的是，如果要调用的方法依赖于隐式参数的实际类型，那么必须在运行时使用动态绑定。</li><li>在覆盖一个方法的时候，子类方法不能低于超类方法的可见性.</li></ol><h4 id="阻止继承"><a href="#阻止继承" class="headerlink" title="阻止继承"></a>阻止继承</h4><ol><li>不允许扩展的类被称为 final 类。<br><code>public fibal</code></li><li>类中的某个特定方法也可以被声明为 final。如果这样做，子类就不能覆盖这个方法(final类中的所有方法自动地成为 final 方法,而不包括字段)</li></ol><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><ol><li><p>在进行强制类型转换之前，先查看是否能够成功地转换。为此只需要使用 instanceof<br>操作符就可以实现。例如：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (staff[<span class="number">1</span>] <span class="keyword">instanceof</span> Manager)</span><br><span class="line">&#123;</span><br><span class="line">boss = (Manager) staff [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只能在继承层次内进行强制类型转换。</p></li></ol><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ol><li>为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的</li><li>使用 abstract 关键字，这样就完全不需要实现这个方法了</li><li>抽象类不能实例化，但需要注意，可以定义一个抽象类的对象 变量，但是这样一个变量只能引用非抽象子类的对象</li><li>通过在父类中声明抽象方法，可以确保所有的子类都必须提供对该方法的具体实现，以满足父类中定义的规范。这样可以保证在子类中都有某个特定行为或功能的实现，增加代码的一致性和可预测性。</li></ol><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><ol><li>如果希望限制超类中的某个方法只允许子类访问，或者更少见地，可能希望允许子类的方法访问超类的某个字段。为此，需要将这些类方法或字段声明为受保护(protected)</li><li>在 Java 中，保护字段只能由同一个包中的类访问</li></ol><h3 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object:所有类的超类"></a>Object:所有类的超类</h3><ol><li>所有的数组类型，不管是对象数组还是基本类型的数组都扩展了 Object 类。</li></ol><h4 id="equal"><a href="#equal" class="headerlink" title="equal"></a>equal</h4><ol><li>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。Object 类中实现的 equals 方法将确定两个对象引用是否相等。这是一个合理的默认行为：如果两个对象引用相等，这两个对象肯定就相等。</li><li>在子类中定义 equals 方法时，首先调用超类的 equals。如果检测失败，对象就不可能相等。如果超类中的字段都相等，就需要比较子类中的实例字段</li><li><code>getClass</code> 返回一个对象所属的类</li><li>可以使用 Override 标记要覆盖超类方法的那些子类方法</li></ol><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><ol><li><p>基础变量和string类有默认的根据内容编码的 <code>hashCode</code> 方法，Object类的默认 <code>hashCode</code> 方法由对象的存储地址来得出hash</p></li><li><p>需要组合多个散列值时，可以调用 Objects.hash 并提供所有这些参数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提示：如果存在数组类型的字段，那么可以使用静态的 Arrays.hashCode 方法计算一个散列码，这个散列码由数组元素的散列码组成。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h1&gt;&lt;h2 id=&quot;基本程序设计结构&quot;&gt;&lt;a href=&quot;#基本程序设计结构&quot; class=&quot;headerlink&quot; title=&quot;基</summary>
      
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="computer" scheme="http://example.com/tags/computer/"/>
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer Plus</title>
    <link href="http://example.com/2023/10/27/C++_Primer_Plus/"/>
    <id>http://example.com/2023/10/27/C++_Primer_Plus/</id>
    <published>2023-10-27T04:34:56.000Z</published>
    <updated>2023-10-27T15:46:40.911Z</updated>
    
    <content type="html"><![CDATA[<p>My C++ Primer Plus Note</p><span id="more"></span><h1 id="C-Primer-Plus"><a href="#C-Primer-Plus" class="headerlink" title="C++ Primer Plus"></a>C++ Primer Plus</h1><h2 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h2><ol><li><p>控制符<code>dec</code>,<code>hex</code>,<code>oct</code>修改后续所有二进制输出为十，十六，八进制</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; hex</span><br></pre></td></tr></table></figure></li><li><p>类型转化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">typename</span> (value);</span><br><span class="line"><span class="built_in">static_cast</span>&lt;<span class="keyword">typename</span>&gt; (value);</span><br></pre></td></tr></table></figure></li><li><p>const 类型——赋值后不会改变</p></li><li><p>static 类型——值改变后会保持</p></li><li><p>cout控制符<br>   <img src="https://pic.imgdb.cn/item/64c2a99c1ddac507cc1035ea.png" alt="cout控制符"></p></li></ol><hr><h2 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><p>编译器不会检查下标是否有效</p></li><li><p>只有定义是能初始化数组</p></li><li><p><code>&#39;s&#39;</code> &amp; <code>&quot;s&quot;</code><br><code>&#39;s&#39;</code> 为字符常量，在ASC2上 <code>==83</code>。<br><code>&quot;s&quot;</code> 为字符串常量， <code>==&#123;&#39;s&#39;,&#39;\0&#39;&#125;</code> ,值为数组地址。</p></li><li><p>在确定存储字符串所需的最短数组时，别忘了将给结尾的空字符计算在内。</p></li><li><p>sizeof返回数组长度时包含 \0,strlen返回时不包含 \0</p></li><li><p><code>cin</code> 使用空白来确定字符串结束位置</p></li><li><p>面向行的输入 <code>getline()</code><br><code>cin.getline(name,20)</code> 读取输入进来的一行前19个字符。<br>以换行符确定结尾，把 <code>\n</code> 转化为 <code>\0</code></p></li><li><p><code>get()</code> 不读入<code>/n</code>, 下一个会单独读入</p></li><li><p>混合输入字符串和数字<br><u><strong><code>cin</code> 读入数字后会保留换行符在缓冲区，这时候用<code>getline</code>读入字符串时会读入换行符，用<code>cin.get()</code>读入换行符来解决</strong></u></p></li><li><p>&#x3D;&#x3D;在C++中，当你使用指针算术时，编译器会根据指针类型来计算指针的偏移量。对于数组指针arr，它指向数组的第一个元素。当你执行(&amp;arr + 1)时，&amp;arr将得到一个指向数组指针的指针，这个指针指向了整个数组，而不是数组的第一个元素。&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;这是一个错误的实现，因为在C++中，数组作为函数参数时会退化为指针类型。也就是说，当你传递一个数组给函数时，实际上传递给函数的是一个指向数组第一个元素的指针，并不是整个数组。所以在函数内部，形参arr的类型实际上是一个指针，而不是数组。&#x3D;&#x3D;</p></li><li><p>对于 <code>const T* p = arr</code>; 这一行代码，p 是一个指向常量 T 的指针，而不是一个常量指针。这意味着 p 所指向的数据是常量，但是 p 本身是可修改的，可以指向其他地方。如果你想让 p 是一个常量指针，即指针本身也不可修改，你可以使用 <code>const T* const p = arr;</code>：</p></li></ol><h3 id="string-类"><a href="#string-类" class="headerlink" title="string 类"></a><code>string</code> 类</h3><ol><li>用法同基础类， <code>+</code> 用于拼接</li><li>长度—— <code>str1.size()</code> or <code>strlen(str1)</code></li><li><code>string</code> 类读取一行 —— <code>getline(cin,str1)</code></li><li>原始字符串 <code>R&quot;(字符串)&quot;</code></li></ol><h3 id="new-delete"><a href="#new-delete" class="headerlink" title="new  delete"></a><code>new</code>  <code>delete</code></h3><ol><li><p>给指针赋数字值 —— <code>char* pt=(int *) 0xB80000000</code></p></li><li><p><code>new</code> &amp; <code>delete</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ps = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br></pre></td></tr></table></figure></li><li><p><code>delete</code> 只是释放指针指向的内存，不删除指针。</p></li><li><p>创建动态数组(动态联编)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pt = <span class="keyword">new</span> <span class="type">int</span> [<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> [] pt;</span><br></pre></td></tr></table></figure></li><li><p><code>cout</code> 在面对 <code>char*</code> 类型时会按字符串输出，如果希望输出地址时，用<code>cout&lt;&lt;(int*) pt</code></p></li></ol><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a><code>vector</code></h3><ol><li><p><code>#include&lt;vector&gt;</code> , 在 <code>std</code> 中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vi</span><span class="params">(n)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>   n为int,常量或变量</p><h3 id="array"><a href="#array" class="headerlink" title="array"></a><code>array</code></h3><ol><li><p><code>#include&lt;array&gt;</code> ,在 <code>std</code> 中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>,5&gt; ai;</span><br></pre></td></tr></table></figure><p>参数不能为变量</p></li></ol><h3 id="ctime"><a href="#ctime" class="headerlink" title="ctime"></a><code>ctime</code></h3><ol><li><p>符号常量 —— <code>CLOCKS_PER_SEC</code></p></li><li><p><code>clock()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">clock_t</span> start = <span class="built_in">clock</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="cctype"><a href="#cctype" class="headerlink" title="cctype"></a><code>cctype</code></h3><p><img src="https://pic.imgdb.cn/item/64c27c791ddac507ccb06188.jpg" alt="字符函数"></p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>定义一个枚举类型，需要使用 enum 关键字，后面跟着枚举类型的名称，以及用大括号 {} 括起来的一组枚举常量。每个枚举常量可以用一个标识符来表示，也可以为它们指定一个整数值，如果没有指定，那么默认从 0 开始递增。</p><p>枚举语法定义格式为：</p><p><code>enum　枚举名　&#123;枚举元素1,枚举元素2,……&#125;;</code></p><hr><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol><li><p>基于范围的for循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array[<span class="number">10</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">typename</span> x : array);</span><br></pre></td></tr></table></figure></li><li><p><code>cin&lt;&lt;char</code> 读入的时候不会储存空格,应该使用 <code>cin.get(char)</code></p></li></ol><h3 id="文本文件I-O"><a href="#文本文件I-O" class="headerlink" title="文本文件I&#x2F;O"></a>文本文件I&#x2F;O</h3><ol><li><p><code>#include&lt;fstream&gt;</code></p></li><li><p>打开文件，并输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream outFile;</span><br><span class="line">outFile.<span class="built_in">open</span>(<span class="string">&quot;fish.txt&quot;</span>);</span><br><span class="line">outFile &lt;&lt; <span class="string">&quot;Fish&quot;</span> &lt;&lt;endl;</span><br><span class="line">outFile.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure></li><li><p>输出时，不存在文件就创造文件，存在就将文件长度截短至零（清空原有内容）。</p></li><li><p>读入文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifstream inFile;</span><br><span class="line">inFile.<span class="built_in">open</span>(<span class="string">&quot;fish.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!inFile.<span class="built_in">is_open</span>())&#123;</span><br><span class="line">   <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> wt;</span><br><span class="line">inFile &gt;&gt; wt;</span><br></pre></td></tr></table></figure></li><li><p><code>exit(EXIT_FAILURE);</code> 在头文件 <code>cstdlib</code> 中</p></li></ol><hr><h2 id="函数探幽"><a href="#函数探幽" class="headerlink" title="函数探幽"></a>函数探幽</h2><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><ol><li>声明——<code>inline 函数</code></li></ol><h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h3><ol><li><p>声明——<code>typename &amp; name1 = name2</code></p></li><li><p>必须在声明的时候初始化等价于</p></li><li><p>将引用作为函数参数,等价于传递指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> *pta,<span class="type">int</span> *ptb)</span></span>;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap1</span>(a,b);</span><br><span class="line"><span class="built_in">swap2</span>(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure></li><li><p>不希望修改变传入变量时，常量引用 <code>const int &amp;a</code></p></li><li><p>引用传递更加严格，调用时不应传递计算式</p></li><li><p>当调用类型不符时，为了避免错误更改原始值，会创建一个临时变量，让引用指向它</p></li><li><p>注意函数结束后，所有的变量会释放，应避免引用其中的变量，使用 <code>new</code></p></li></ol><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><ol><li><p>在声明函数原型时，加入初始值，定义时不用，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">chico</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">1</span>,<span class="type">int</span> c=<span class="number">2</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>如果某个实参赋了初值，其右边的都需要赋初值。</p></li></ol><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ol><li>通过设定不同的参数列表来区别&#x3D;&#x3D;只识别参数种类，不考虑返回值类型&#x3D;&#x3D;</li><li>引用类型和类型本身视为一个特征标。</li><li>匹配时要区分 <code>const</code> 变量和非 <code>const</code> 变量</li><li>非 <code>const</code> 变量可以赋给 <code>const</code> 变量，反之不行。</li></ol><h3 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h3><ol><li><p>声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;typenmae name&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(name &amp;a, name &amp;b)</span></span>&#123;</span><br><span class="line">   name temp;</span><br><span class="line">   temp=a;</span><br><span class="line">   a=b;</span><br><span class="line">   b=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显示具体化,优先于一般模版</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T &amp;a.T &amp;b)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="type">void</span> <span class="built_in">swap</span>&lt;<span class="type">int</span>&gt;(<span class="type">int</span> ,<span class="type">int</span> )</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="内存模型和名称空间"><a href="#内存模型和名称空间" class="headerlink" title="内存模型和名称空间"></a>内存模型和名称空间</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><ol><li><code>#ifndef</code> <code>#endif</code></li></ol><h3 id="变量和作用域"><a href="#变量和作用域" class="headerlink" title="变量和作用域"></a>变量和作用域</h3><ol><li><p>自动变量：作用域结束后释放</p></li><li><p>静态变量：程序结束后释放</p></li><li><p><strong>链接性</strong></p><ol><li>自动变量无链接性</li><li>静态变量——在代码块中，用static——无链接性</li><li>静态变量——不在函数中——外部链接性（全局变量）</li><li>静态变量——不在函数中，用static——内部链接性</li></ol></li><li><p>引用声明：关键字extern</p></li><li><p>关键字：</p><ol><li><code>const</code> 不能修改</li><li><code>volstile</code> 即使代码没有对内存修改，其值仍然可能会变化</li><li><code>mutable</code> 结构或类为 <code>const</code> ，成员仍然能修改值</li></ol></li></ol><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><ol><li><p>声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> name&#123;</span><br><span class="line">   <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> name::a;</span><br></pre></td></tr></table></figure></li><li><p>不能同时进行两个同名的using声明。</p></li></ol><hr><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><h3 id="抽象和类"><a href="#抽象和类" class="headerlink" title="抽象和类"></a>抽象和类</h3><ol><li>不声明默认为私有</li></ol><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><ol><li>构造目的——数据为私有，不能外部初始化</li><li>构造函数的参数名不能和私有成员相同</li><li>构造函数应该与类名相同</li><li>&#x3D;&#x3D;构造函数没有类型名&#x3D;&#x3D;</li><li>无法使用对象来调用构造函数</li><li>默认构造函数——无参数<ol><li>没有构造函数时，系统提供，对所有值都不赋值</li><li>有构造函数时，必须自己提供默认构造函数</li></ol><ul><li>如果构造函数的全部参数都给出了默认值，这该构造函数为默认构造函数，全空的构造函数失效</li></ul></li><li>析构函数——原型 <code>~类名()</code></li><li>const 成员函数——承诺不改变对象<br><code>viod Stock::show() const</code></li><li>不能再声明和定义的时候都包含默认值</li><li>内置类型也有默认构造函数</li></ol>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="built_in">int</span>(); <span class="comment">// a被初始化为0</span></span><br><span class="line"><span class="type">double</span> b = <span class="built_in">double</span>(); <span class="comment">// b被初始化为0.0</span></span><br><span class="line"><span class="type">char</span> c = <span class="built_in">char</span>(); <span class="comment">// c被初始化为空字符（&#x27;\0&#x27;）</span></span><br></pre></td></tr></table></figure><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><ol><li>目的——让成员函数访问多个对象</li><li>每个成员函数都有自己的 <code>this</code> 指针，指向调用它的对象</li></ol><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><ol><li>声明时，可以使用构造函数，但必须对每个对象都使用构造函数</li></ol><h3 id="类作用域"><a href="#类作用域" class="headerlink" title="类作用域"></a>类作用域</h3><ol><li><p>类的声明只是描述形式，没有分配空间，所以不能像下面这么描述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">   <span class="type">int</span> a=<span class="number">5</span>;</span><br><span class="line">   <span class="type">int</span> att[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>想要定义常量，应使用关键字 <code>static const</code></p></li></ol><hr><h2 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h2><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><ol><li>声明—— <code>类名 operator运算符 （参数列表）</code></li><li>调用时，前者作为调用对象，后者作为参数。</li><li>限制——<ol><li>至少一个对象是用户自定义类型</li><li>不违反以前的运算符</li></ol></li></ol><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><ol><li><p>创建——在类中声明 <code>friend 函数</code></p></li><li><p><code>firend</code> 只在声明原型时使用，定义时不能使用</p></li><li><p>不能被对象用成员运算符 <code>.</code> 调用</p></li><li><p>友元重载操作符时，参数列表的两个参数分别为前者和后者</p></li><li><p><code>&lt;&lt;</code> 重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os, <span class="type">const</span> Time &amp; t)&#123;</span><br><span class="line">   cout &lt;&lt; t.hours &lt;&lt;<span class="string">&quot; : &quot;</span>;</span><br><span class="line">   <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="类和动态内存分配"><a href="#类和动态内存分配" class="headerlink" title="类和动态内存分配"></a>类和动态内存分配</h2><h3 id="动态内存和类"><a href="#动态内存和类" class="headerlink" title="动态内存和类"></a>动态内存和类</h3><ol><li>按值传递类对象时，会创建一个临时对象作为副本，并在函数调用结束时销毁该临时对象。构造函数用于创建对象和拷贝对象，而析构函数用于在对象生命周期结束时进行资源清理。使用引用或指针通过引用传递对象可以避免创建副本，提高效率。</li><li>当类对象包含动态分配的内存时，特别是指针成员时，要小心处理拷贝构造函数和析构函数，以避免出现悬空指针或资源泄漏等问题。进行深拷贝可以确保每个对象都有独立的内存，避免副本析构时影响原始对象和其他副本对象</li></ol><h4 id="特殊成员函数"><a href="#特殊成员函数" class="headerlink" title="特殊成员函数"></a>特殊成员函数</h4><ol><li>自动提供下列成员函数(如果未定义)：<ol><li>默认构造函数</li><li>默认析构函数</li><li>复制构造函数</li><li>赋值运算符</li><li>地址运算符</li></ol></li><li>复制构造函数，用于将一个对象复制到新创建的对象中<br>原型为：<code>Class_name(const Class_name &amp;)</code><br>&#x3D;&#x3D;每当程序生成对象副本或者生成临时对象时就会调用该函数&#x3D;&#x3D;</li><li>复制的对象不会调用构造函数，但会调用析构函数</li><li>以下两种情况要注意复制构造函数<ol><li>存在静态变量</li><li>使用了<code>new</code>分配空间</li></ol></li><li>当用到 <code>=</code> 对对象间赋值时要重构 <code>=</code></li></ol><h3 id="构造函数和new"><a href="#构造函数和new" class="headerlink" title="构造函数和new"></a>构造函数和new</h3><ol><li>如果存在多个构造函数，必须以相同的方法来使用new，因为析构函数只有一个，<code>new</code> 和 <code>delete</code> ，<code>new[]</code>和 <code>delete[]</code>必须匹配</li><li>用 <code>nullptr</code> 来表示空指针</li><li>成员初始化列表的语法(只能用于成员初始化)<br><code>Classy::Classy(int n,int m) : mem1(n), mem2(m), mem3(f(n,m))</code></li></ol><hr><h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><h3 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h3><ol><li>公有派生声明<br><code>class son: public father</code></li><li>公有派生会继承所有成员，但私有成员只能通过公有方法来访问</li><li>子类要求<ol><li>提供构造函数</li><li>其他函数</li></ol></li><li>派生类的构造函数&#x3D;&#x3D;创建派生对象时，程序会先创建基类对象，并调用基类构造函数，然后再初始化派生类的成员&#x3D;&#x3D;<br><code>son:son(****):father(****)&#123;****&#125;</code><br>or <code>son:son(****):father(****),mem(****)</code></li><li>派生类的析构函数只用处理派生类的新增成员</li></ol><h4 id="基类与派生类"><a href="#基类与派生类" class="headerlink" title="基类与派生类"></a>基类与派生类</h4><ol><li>派生类可以使用基类的非私有方法</li><li>基类指针可以不显示类型转换的情况下指向派生类，但这个指针就不能引用派生类的方法了，引用相同</li></ol><h3 id="多态继承"><a href="#多态继承" class="headerlink" title="多态继承"></a>多态继承</h3><ol><li>&#x3D;&#x3D;重定义基类方法不是对基类方法进行重载，无论参数列表是否相同会隐藏所有同名的基类方法&#x3D;&#x3D;<ol><li>如果重定义继承的方法，应确保与原型参数列表相同</li><li>应该对基类所有同名的方法都进行重定义</li></ol></li><li>虚方法 <code>virtual</code> 用于类声明中，实现时不用</li><li>不使用虚方法，程序会根据引用或指针类型来选择方法；虚方法会根据指针指向对象的类型来选择方法</li><li>基类需要一个虚析构函数，确保释放派生类对象的时候能正确</li><li>再派生类中，调用基类方法使用 作用域解析符 <code>:</code></li><li>派生类可以访问父类的protected类的成员，但对其他类仍然不可见</li><li>派生类不会继承构造函数</li><li>友元不能是虚函数，因为友元不是类成员</li><li>如果派生类位于派生链中，将会使用最新的虚方法</li></ol><hr><h2 id="C-的代码重用"><a href="#C-的代码重用" class="headerlink" title="C++的代码重用"></a>C++的代码重用</h2><h3 id="包含对象成员的类"><a href="#包含对象成员的类" class="headerlink" title="包含对象成员的类"></a>包含对象成员的类</h3><ol><li><p>使用has-a关系时，类对象不能自动获得被包含对象的接口</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/52152355">使用关键字 <code>explicit</code> 可以禁止构造函数被隐式调用</a><br>解释： 当构造函数提供全部默认参数时，当传入错误类型参数时会触发构造函数的隐式调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ai</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> x,y;</span><br><span class="line">      <span class="built_in">ai</span>(<span class="type">int</span> a=<span class="number">1</span>,<span class="type">int</span> b=<span class="number">2</span>):</span><br><span class="line">         <span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(ai chen)</span></span></span><br></pre></td></tr></table></figure><p>当调用 <code>show(1)</code> 时，就会触发构造函数的隐式调用</p></li><li><p>初始化顺序：初始化列表中包含多个项目时，初始化顺序是他们在类中被声明的顺序，而不是在初始化列表中的顺序</p></li></ol><h3 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h3><ol><li>如果使用私有继承，基类的公有成员和保护成员都会成为派生类的私有成员，</li><li>对于继承类，在初始化的时候使用类名来标识基类构造函数</li><li>派生类的派生类不能访问基类的成员，但保护继承可以</li><li>在使用保护和私有派生时，想要使基类方法在派生类外可用<ol><li>方法一：在派生类中声名一个公有函数，其中调用基类方法</li><li>方法二：在派生类中公有声明 <code>using</code></li></ol></li></ol><p><img src="https://pic.imgdb.cn/item/64ca646a1ddac507cccccdfe.jpg" alt="继承总结"></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><ol><li><p>虚基类使得从多个同基类的类派生出的对象只继承一个基类对象</p></li><li><p>声明，在派生类中声明时，给基类加上关键词 <code>virtual</code> ,从本质来说是使有共同基类的对象共享一个基类对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son1</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> father&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son2</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> father&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span>:<span class="keyword">public</span> son1,<span class="keyword">public</span> son2&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>派生类只能调用它自己基类的构造函数，而不能调用它基类的基类的构造函数，但可以通过基类的构造函数间接的调用</p></li><li><p>虚函数禁止类上述的间接调用，如果要间接调用，需要显式的进行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">grandson</span>(<span class="type">const</span> &amp; father,<span class="type">int</span> a,<span class="type">int</span> p):</span><br><span class="line">         <span class="built_in">father</span>(father),<span class="built_in">son1</span>(father,a),<span class="built_in">son2</span>(father,b)&#123;&#125;</span><br></pre></td></tr></table></figure><p>对于虚基类必须这样做，但对非虚基类是非法的。</p></li><li><p>对于方法，可以使用类作用符或者重定义来解决</p></li></ol><h3 id="类模版"><a href="#类模版" class="headerlink" title="类模版"></a>类模版</h3><ol><li><p>声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;Type&gt;::<span class="built_in">push</span>(<span class="type">const</span> Type &amp; item)</span><br></pre></td></tr></table></figure></li><li><p>递归使用模版<code>Type&lt;Type&lt;int,5&gt;,10&gt; twodee</code></p></li><li><p>多个类型参数与默认模版参数<br><code>template&lt;class T1,class T2=int&gt;</code></p></li></ol><h4 id="类模版的实例化和具体化"><a href="#类模版的实例化和具体化" class="headerlink" title="类模版的实例化和具体化"></a>类模版的实例化和具体化</h4><ol><li><p>实例化——类模板定义只是一个通用的模板，并没有实际的对象被创建。实例化是将这个通用的模板转换为特定类型的类的过程。这就意味着，类模板本身并不能直接被使用，需要通过实例化为具体的类来创建对象。</p></li><li><p>在C++中，具体化（Specialization）是一种特殊的机制，用于为特定类型提供自定义的模板实现，覆盖默认的模板实现。当模板的通用实现对于特定类型不适用或不合适时，可以通过具体化来为这些特定类型提供特殊的实现。</p></li><li><p>隐式实例化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayTP&lt;<span class="type">int</span>,<span class="number">100</span>&gt; stuff;</span><br></pre></td></tr></table></figure></li><li><p>显式实例化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">ArrayTP</span>&lt;string,<span class="number">100</span>&gt;;</span><br></pre></td></tr></table></figure></li><li><p>显式具体化(类似于重载)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通模版</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sort</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//特殊模版</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">class</span> <span class="title class_">Sort</span>&lt;<span class="type">char</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>部分具体化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1&gt; <span class="keyword">class</span> <span class="title class_">Sort</span>&lt;T1,<span class="type">char</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>当存在多个模版时，会优先选择匹配的具体化程度最高的模版</p></li><li><p>模版嵌套</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">   <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br></pre></td></tr></table></figure></li><li><p>模版作为模版参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">Thing</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Crab</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="模版类和友元"><a href="#模版类和友元" class="headerlink" title="模版类和友元"></a>模版类和友元</h4><h5 id="非模版友元"><a href="#非模版友元" class="headerlink" title="非模版友元"></a>非模版友元</h5><ol><li><p>需要为每个实例化的类的友元提供显式具体化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hash</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">counts</span><span class="params">(hash&lt;T&gt; &amp;)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">counts</span><span class="params">(hash&lt;<span class="type">int</span>&gt; &amp; tt)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">counts</span><span class="params">(hash&lt;<span class="type">double</span>&gt; &amp; tt)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="约束模版类友元函数"><a href="#约束模版类友元函数" class="headerlink" title="约束模版类友元函数"></a>约束模版类友元函数</h5><ol><li><p>声明,在类定义前声明模版函数，再在类中声明为友元</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">counts</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">report</span><span class="params">(T &amp;)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hash</span>&#123;</span><br><span class="line">   <span class="keyword">friend</span> <span class="type">void</span> <span class="built_in">counts</span>&lt;TT&gt;();</span><br><span class="line">   <span class="keyword">friend</span> <span class="type">void</span> report&lt;&gt;(hash&lt;TT&gt; &amp;);<span class="comment">//空&lt;&gt;中应该填入具体化类型，但可以通过参数推断可以省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="非约束模版类友元函数"><a href="#非约束模版类友元函数" class="headerlink" title="非约束模版类友元函数"></a>非约束模版类友元函数</h5><ol><li><p>声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chenshi</span>&#123;</span><br><span class="line">   <span class="keyword">template</span> &lt;<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt; <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">show2</span><span class="params">(C &amp;, D &amp;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="友元、异常和其他"><a href="#友元、异常和其他" class="headerlink" title="友元、异常和其他"></a>友元、异常和其他</h2><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><ol><li><p>声明，友元类对象可以访问对应友元的私有对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">tv</span>&#123;</span><br><span class="line">   <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">remote</span>; <span class="comment">//remote can access tv private parts</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">remote</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p>过程——</p><ol><li>引发异常</li><li>用处理程序捕获异常</li><li>使用try块</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="built_in">func</span>()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* s)&#123;</span><br><span class="line">      count&lt;&lt;s;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>()</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;sm&quot;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw关键字会结束函数运行，提供返回值后会去找第一个匹配的catch块</p></li><li><p>&#x3D;&#x3D;栈解退&#x3D;&#x3D;<br>假如try块中没有直接调用引发异常的函数，而是调用了对引发异常的函数进行调用的函数，throw结束函数后会直接回到try块</p><div align="center"><img src=https://pic.imgdb.cn/item/64ce00b01ddac507cc296c24.jpg alt="栈解退" style="transform: rotate(-90deg);" width="400px" /></div></li><li><p>引发异常时重视创建一个临时拷贝，即便声明的时候是引用类型</p></li></ol><hr><h2 id="C-常用数据结构总结"><a href="#C-常用数据结构总结" class="headerlink" title="C++常用数据结构总结"></a><a href="https://blog.csdn.net/Leader_wang/article/details/82959362">C++常用数据结构总结</a></h2><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashSet</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;list&lt;<span class="type">int</span>&gt;&gt; data;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> base =<span class="number">857</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key%base;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyHashSet</span>(): <span class="built_in">data</span>(base) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h=<span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it =data[h].<span class="built_in">begin</span>();it !=data[h].<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((*it)==key)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data[h].<span class="built_in">push_back</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h=<span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=data[h].<span class="built_in">begin</span>();it!=data[h].<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*it==key)&#123;</span><br><span class="line">                data[h].<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*it) == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyHashSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyHashSet* obj = new MyHashSet();</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;remove(key);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;contains(key);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;My C++ Primer Plus Note&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="http://example.com/categories/Notes/"/>
    
    
    <category term="computer" scheme="http://example.com/tags/computer/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
</feed>
